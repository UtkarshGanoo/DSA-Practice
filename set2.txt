
set 2 


1)Given an integer array nums, find the
subarray with the largest sum, and return its sum.
Input: nums = [-2,1,-3,4,-1,2,1,-5,4]
Output: 6
Explanation: The subarray [4,-1,2,1] has the largest sum 6.

#include <iostream>
#include <vector>
using namespace std;

int maxSubArraySum(vector<int>& nums) {
    int maxSum = nums[0], currentSum = nums[0];
    for (int i = 1; i < nums.size(); i++) {
        currentSum = max(nums[i], currentSum + nums[i]);
        maxSum = max(maxSum, currentSum);
    }
    return maxSum;
}

int main() {
    vector<int> nums = {-2, 1, -3, 4, -1, 2, 1, -5, 4};
    cout << maxSubArraySum(nums) << endl;
    return 0;
}







---------------------------------------------------------------------------------------------------------
2) Given an integer array arr[] of size n, the task is to find the count inversions of the given array.
Two array elements arr[i] and arr[j] form an inversion if arr[i] > arr[j] and i < j.
Input: arr[] = {7, 2, 6, 3}
Output: 4
Explanation: Given array has 4 inversions: (7, 2), (7, 6), (7, 3), (6, 3)

#include <iostream>
#include <vector>
using namespace std;

int mergeAndCount(vector<int>& arr, int left, int right) {
    if (left >= right) return 0;
    int mid = left + (right - left) / 2;
    int invCount = mergeAndCount(arr, left, mid) + mergeAndCount(arr, mid + 1, right);
    invCount += merge(arr, left, mid, right);
    return invCount;
}

int merge(vector<int>& arr, int left, int mid, int right) {
    int n1 = mid - left + 1, n2 = right - mid;
    vector<int> L(n1), R(n2);
    for (int i = 0; i < n1; i++) L[i] = arr[left + i];
    for (int i = 0; i < n2; i++) R[i] = arr[mid + 1 + i];

    int i = 0, j = 0, k = left, invCount = 0;
    while (i < n1 && j < n2) {
        if (L[i] <= R[j]) arr[k++] = L[i++];
        else {
            arr[k++] = R[j++];
            invCount += (n1 - i);
        }
    }
    while (i < n1) arr[k++] = L[i++];
    while (j < n2) arr[k++] = R[j++];
    return invCount;
}

int main() {
    vector<int> arr = {7, 2, 6, 3};
    cout << mergeAndCount(arr, 0, arr.size() - 1) << endl;
    return 0;
}



---------------------------------------------------------------------------------------------------------
3)Given an integer array nums and an integer k, return the kth largest element in the array.
Note that it is the kth largest element in the sorted order, not the kth distinct element.
Solve it without sorting.
Example:
Input: nums = [3,2,1,5,6,4], k = 2
Output: 5

#include <iostream>
#include <vector>
#include <queue>
using namespace std;

int findKthLargest(vector<int>& nums, int k) {
    priority_queue<int, vector<int>, greater<int>> minHeap;
    for (int num : nums) {
        minHeap.push(num);
        if (minHeap.size() > k) minHeap.pop();
    }
    return minHeap.top();
}

int main() {
    vector<int> nums = {3, 2, 1, 5, 6, 4};
    int k = 2;
    cout << findKthLargest(nums, k) << endl;
    return 0;
}




---------------------------------------------------------------------------------------------------------
4)A phrase is a palindrome if, after converting all uppercase letters into lowercase letters and
removing all non-alphanumeric characters, it reads the same forward and backward.
Alphanumeric characters include letters and numbers.
Given a string s, return true if it is a palindrome, or false otherwise.
Example 1:
Input: s = “A man, a plan, a canal: Panama”
Output: true
Explanation: “amanaplanacanalpanama” is a palindrome.
Example 2:
Input: s = “race a car”;
Output: false
#include <iostream>
#include <string>
#include <cctype>
using namespace std;

bool isPalindrome(string s) {
    int left = 0, right = s.size() - 1;
    while (left < right) {
        if (!isalnum(s[left])) left++;
        else if (!isalnum(s[right])) right--;
        else if (tolower(s[left]) != tolower(s[right])) return false;
        else {
            left++;
            right--;
        }
    }
    return true;
}

int main() {
    string s = "A man, a plan, a canal: Panama";
    cout << isPalindrome(s) << endl;
    return 0;
}



---------------------------------------------------------------------------------------------------------
5) Given an array arr[] of size n, return an equilibrium index (if any) or -1 if no equilibrium index
exists. The equilibrium index of an array is an index such that the sum of elements at lower
indexes equals the sum of elements at higher indexes.
Note: Return equilibrium point in 1-based indexing. Return -1 if no such point exists.
Examples:
Input: arr[] = {-7, 1, 5, 2, -4, 3, 0}
Output: 4
Explanation: In 1-based indexing, 4 is an equilibrium index, because:
arr[1] + arr[2] + arr[3] = arr[5] + arr[6] + arr[7]
Input: arr[] = {1, 2, 3}
Output: -1
Explanation: There is no equilibrium index in the array.
Input:arr = {1, 3, 5, 2, 2}
Expected Output:2
Explanation: At index 2, the sum of elements on the left (1 + 3 = 4) is equal to the sum of
elements on the right (2 + 2 = 4).

#include <iostream>
#include <vector>
using namespace std;

int findEquilibriumIndex(vector<int>& arr) {
    int totalSum = 0, leftSum = 0;
    for (int num : arr) totalSum += num;

    for (int i = 0; i < arr.size(); i++) {
        totalSum -= arr[i];
        if (leftSum == totalSum) return i + 1; // 1-based indexing
        leftSum += arr[i];
    }
    return -1;
}

int main() {
    vector<int> arr = {-7, 1, 5, 2, -4, 3, 0};
    cout << findEquilibriumIndex(arr) << endl;
    return 0;
}


---------------------------------------------------------------------------------------------------------
6)Given a sorted array A (sorted in ascending order), having N integers, find if there exists any
pair of elements (A[i], A[j]) such that their sum is equal to X.
a)Using Naive Approach
b)Using Two Pointer Technique
Input: A = [1, 2, 4, 5, 7, 11]
N = 6
X = 9
Expected Output: Yes
(Explanation: The pair (2, 7) sums to 9.)

#include <iostream>
#include <vector>
using namespace std;

bool findPairNaive(vector<int>& arr, int X) {
    for (int i = 0; i < arr.size(); i++) {
        for (int j = i + 1; j < arr.size(); j++) {
            if (arr[i] + arr[j] == X) return true;
        }
    }
    return false;
}

int main() {
    vector<int> arr = {1, 2, 4, 5, 7, 11};
    int X = 9;
    cout << (findPairNaive(arr, X) ? "Yes" : "No") << endl;
    return 0;
}



#include <iostream>
#include <vector>
using namespace std;

bool findPairTwoPointer(vector<int>& arr, int X) {
    int left = 0, right = arr.size() - 1;
    while (left < right) {
        int sum = arr[left] + arr[right];
        if (sum == X) return true;
        else if (sum < X) left++;
        else right--;
    }
    return false;
}

int main() {
    vector<int> arr = {1, 2, 4, 5, 7, 11};
    int X = 9;
    cout << (findPairTwoPointer(arr, X) ? "Yes" : "No") << endl;
    return 0;
}



#include <iostream>
#include <vector>
using namespace std;

bool findPairTwoPointer(vector<int>& arr, int X) {
    int left = 0, right = arr.size() - 1;
    while (left < right) {
        int sum = arr[left] + arr[right];
        if (sum == X) return true;
        else if (sum < X) left++;
        else right--;
    }
    return false;
}

int main() {
    vector<int> arr = {1, 2, 4, 5, 7, 11};
    int X = 9;
    cout << (findPairTwoPointer(arr, X) ? "Yes" : "No") << endl;
    return 0;
}

---------------------------------------------------------------------------------------------------------
8)Given an array of integers of size ‘n’, Our aim is to calculate the maximum sum of ‘k’
consecutive elements in the array(Using Sliding Window Technique)
Input : arr[] = {100, 200, 300, 400}, k = 2
Output : 700
Input : arr[] = {1, 4, 2, 10, 23, 3, 1, 0, 20}, k = 4
Output : 39
We get maximum sum by adding subarray {4, 2, 10, 23} of size 4.
Input : arr[] = {2, 3}, k = 3
Output : Invalid
There is no subarray of size 3 as size of whole array is 2.

#include <iostream>
#include <vector>
using namespace std;

int maxSumSubarray(vector<int>& arr, int k) {
    if (arr.size() < k) return -1;
    int maxSum = 0, currentSum = 0;
    for (int i = 0; i < k; i++) currentSum += arr[i];
    maxSum = currentSum;

    for (int i = k; i < arr.size(); i++) {
        currentSum += arr[i] - arr[i - k];
        maxSum = max(maxSum, currentSum);
    }

    return maxSum;
}

int main() {
    vector<int> arr = {100, 200, 300, 400};
    int k = 2;
    cout << maxSumSubarray(arr, k) << endl;
    return 0;
}





---------------------------------------------------------------------------------------------------------
9)You are given an array of prices where prices[i] is the price of a given stock on an ith day. You
want to maximize your profit by choosing a single day to buy one stock and choosing a
different day in the future to sell that stock. Return the maximum profit you can achieve from
this transaction. If you cannot achieve any profit, return 0
Input: prices = [7,1,5,3,6,4]
Output: 5
Explanation: Buy on day 2 (price = 1) and sell on day 5 (price = 6), profit = 6-1 = 5.

#include <iostream>
#include <vector>
using namespace std;

int maxProfit(vector<int>& prices) {
    int minPrice = INT_MAX, maxProfit = 0;
    for (int price : prices) {
        minPrice = min(minPrice, price);
        maxProfit = max(maxProfit, price - minPrice);
    }
    return maxProfit;
}

int main() {
    vector<int> prices = {7, 1, 5, 3, 6, 4};
    cout << maxProfit(prices) << endl;
    return 0;
}



---------------------------------------------------------------------------------------------------------
10)Given an integer array, find the maximum length subarray having a given sum.(USE
HASHMAP Concept)
Input:nums[] = { 5, 6, -5, 5, 3, 5, 3, -2, 0 }target = 8
Output:{ -5, 5, 3, 5 }
Subarrays with sum 8 are { -5, 5, 3, 5 },{ 3, 5 },{ 5, 3 }
The longest subarray is { -5, 5, 3, 5 } having length 4.


#include <iostream>
#include <unordered_map>
#include <vector>
using namespace std;

int maxSubarrayLengthWithSum(vector<int>& nums, int target) {
    unordered_map<int, int> sumMap;
    int maxLength = 0, currentSum = 0;

    for (int i = 0; i < nums.size(); i++) {
        currentSum += nums[i];
        if (currentSum == target) maxLength = i + 1;
        if (sumMap.find(currentSum - target) != sumMap.end()) {
            maxLength = max(maxLength, i - sumMap[currentSum - target]);
        }
        if (sumMap.find(currentSum) == sumMap.end()) sumMap[currentSum] = i;
    }
    return maxLength;
}

int main() {
    vector<int> nums = {5, 6, -5, 5, 3, 5, 3, -2, 0};
    int target = 8;
    cout << maxSubarrayLengthWithSum(nums, target) << endl;
    return 0;
}


----------------------------------------------------------------------------------------------------------
